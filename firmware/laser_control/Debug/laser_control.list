
laser_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002980  08002980  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002980  08002980  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  0800298c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800298c  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006160  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001526  00000000  00000000  00026194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  000276c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8c  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cb7  00000000  00000000  0003f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007733e  00000000  00000000  00044dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002194  00000000  00000000  000bc15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002938 	.word	0x08002938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002938 	.word	0x08002938

080001c8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f043 0201 	orr.w	r2, r3, #1
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	601a      	str	r2, [r3, #0]
}
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr

080001e8 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	683a      	ldr	r2, [r7, #0]
 80001f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr

08000204 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	6a1a      	ldr	r2, [r3, #32]
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	431a      	orrs	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	621a      	str	r2, [r3, #32]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000232:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	645a      	str	r2, [r3, #68]	; 0x44
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr

08000246 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000246:	b480      	push	{r7}
 8000248:	b083      	sub	sp, #12
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	f043 0202 	orr.w	r2, r3, #2
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	60da      	str	r2, [r3, #12]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	683a      	ldr	r2, [r7, #0]
 8000274:	619a      	str	r2, [r3, #24]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
	...

080002a0 <my_init>:
#include "main.h"
#include <laser.h>
#include <motors.h>


void my_init() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	SET_DIR_POSITIVE_X;
 80002a4:	2110      	movs	r1, #16
 80002a6:	4819      	ldr	r0, [pc, #100]	; (800030c <my_init+0x6c>)
 80002a8:	f7ff ffeb 	bl	8000282 <LL_GPIO_ResetOutputPin>
	SET_DIR_POSITIVE_Y;
 80002ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f7ff ffd7 	bl	8000266 <LL_GPIO_SetOutputPin>

	DISABLE_MOTOR_X;
 80002b8:	2102      	movs	r1, #2
 80002ba:	4814      	ldr	r0, [pc, #80]	; (800030c <my_init+0x6c>)
 80002bc:	f7ff ffd3 	bl	8000266 <LL_GPIO_SetOutputPin>
	DISABLE_MOTOR_Y;
 80002c0:	2104      	movs	r1, #4
 80002c2:	4812      	ldr	r0, [pc, #72]	; (800030c <my_init+0x6c>)
 80002c4:	f7ff ffcf 	bl	8000266 <LL_GPIO_SetOutputPin>

	// MOTOR_X
	LL_TIM_CC_EnableChannel(TIM16, LL_TIM_CHANNEL_CH1);
 80002c8:	2101      	movs	r1, #1
 80002ca:	4811      	ldr	r0, [pc, #68]	; (8000310 <my_init+0x70>)
 80002cc:	f7ff ff9a 	bl	8000204 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableAllOutputs(TIM16);
 80002d0:	480f      	ldr	r0, [pc, #60]	; (8000310 <my_init+0x70>)
 80002d2:	f7ff ffa8 	bl	8000226 <LL_TIM_EnableAllOutputs>

	// MOTOR_Y
	LL_TIM_CC_EnableChannel(TIM17, LL_TIM_CHANNEL_CH1);
 80002d6:	2101      	movs	r1, #1
 80002d8:	480e      	ldr	r0, [pc, #56]	; (8000314 <my_init+0x74>)
 80002da:	f7ff ff93 	bl	8000204 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableAllOutputs(TIM17);
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <my_init+0x74>)
 80002e0:	f7ff ffa1 	bl	8000226 <LL_TIM_EnableAllOutputs>

	ENABLE_MOTOR_Y;
 80002e4:	2104      	movs	r1, #4
 80002e6:	4809      	ldr	r0, [pc, #36]	; (800030c <my_init+0x6c>)
 80002e8:	f7ff ffcb 	bl	8000282 <LL_GPIO_ResetOutputPin>
	LL_TIM_SetCounter(TIM2, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002f2:	f7ff ff79 	bl	80001e8 <LL_TIM_SetCounter>
	LL_TIM_EnableIT_CC1(TIM2);
 80002f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002fa:	f7ff ffa4 	bl	8000246 <LL_TIM_EnableIT_CC1>
	LL_TIM_EnableCounter(TIM2);
 80002fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000302:	f7ff ff61 	bl	80001c8 <LL_TIM_EnableCounter>

	//test();
	//do_home();


}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	48000400 	.word	0x48000400
 8000310:	40014400 	.word	0x40014400
 8000314:	40014800 	.word	0x40014800

08000318 <my_loop>:

void my_loop() {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <__NVIC_SetPriorityGrouping+0x44>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000344:	4013      	ands	r3, r2
 8000346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035a:	4a04      	ldr	r2, [pc, #16]	; (800036c <__NVIC_SetPriorityGrouping+0x44>)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	60d3      	str	r3, [r2, #12]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <__NVIC_GetPriorityGrouping+0x18>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	f003 0307 	and.w	r3, r3, #7
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039a:	2b00      	cmp	r3, #0
 800039c:	db0b      	blt.n	80003b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 021f 	and.w	r2, r3, #31
 80003a4:	4907      	ldr	r1, [pc, #28]	; (80003c4 <__NVIC_EnableIRQ+0x38>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	095b      	lsrs	r3, r3, #5
 80003ac:	2001      	movs	r0, #1
 80003ae:	fa00 f202 	lsl.w	r2, r0, r2
 80003b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	6039      	str	r1, [r7, #0]
 80003d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db0a      	blt.n	80003f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	; (8000414 <__NVIC_SetPriority+0x4c>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f0:	e00a      	b.n	8000408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4908      	ldr	r1, [pc, #32]	; (8000418 <__NVIC_SetPriority+0x50>)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	3b04      	subs	r3, #4
 8000400:	0112      	lsls	r2, r2, #4
 8000402:	b2d2      	uxtb	r2, r2
 8000404:	440b      	add	r3, r1
 8000406:	761a      	strb	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	e000e100 	.word	0xe000e100
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041c:	b480      	push	{r7}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	f1c3 0307 	rsb	r3, r3, #7
 8000436:	2b04      	cmp	r3, #4
 8000438:	bf28      	it	cs
 800043a:	2304      	movcs	r3, #4
 800043c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3304      	adds	r3, #4
 8000442:	2b06      	cmp	r3, #6
 8000444:	d902      	bls.n	800044c <NVIC_EncodePriority+0x30>
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	3b03      	subs	r3, #3
 800044a:	e000      	b.n	800044e <NVIC_EncodePriority+0x32>
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	f04f 32ff 	mov.w	r2, #4294967295
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	43da      	mvns	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	401a      	ands	r2, r3
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000464:	f04f 31ff 	mov.w	r1, #4294967295
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43d9      	mvns	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	4313      	orrs	r3, r2
         );
}
 8000476:	4618      	mov	r0, r3
 8000478:	3724      	adds	r7, #36	; 0x24
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <LL_RCC_HSE_EnableBypass+0x1c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <LL_RCC_HSE_EnableBypass+0x1c>)
 800048e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <LL_RCC_HSE_Enable+0x1c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <LL_RCC_HSE_Enable+0x1c>)
 80004ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_RCC_HSE_IsReady+0x24>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
}
 80004dc:	4618      	mov	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_SetSysClkSource+0x24>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	f023 0203 	bic.w	r2, r3, #3
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <LL_RCC_SetSysClkSource+0x24>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	604b      	str	r3, [r1, #4]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_GetSysClkSource+0x18>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f003 030c 	and.w	r3, r3, #12
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_SetAHBPrescaler+0x24>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <LL_RCC_SetAHBPrescaler+0x24>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	604b      	str	r3, [r1, #4]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_RCC_SetAPB1Prescaler+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	604b      	str	r3, [r1, #4]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	604b      	str	r3, [r1, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_SetTIMClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMClockSource(uint32_t TIMxSource)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <LL_RCC_SetTIMClockSource+0x34>)
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	0edb      	lsrs	r3, r3, #27
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	401a      	ands	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80005ca:	4904      	ldr	r1, [pc, #16]	; (80005dc <LL_RCC_SetTIMClockSource+0x34>)
 80005cc:	4313      	orrs	r3, r2
 80005ce:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <LL_RCC_PLL_Enable+0x1c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <LL_RCC_PLL_Enable+0x1c>)
 80005ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ee:	6013      	str	r3, [r2, #0]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LL_RCC_PLL_IsReady+0x24>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000610:	bf0c      	ite	eq
 8000612:	2301      	moveq	r3, #1
 8000614:	2300      	movne	r3, #0
 8000616:	b2db      	uxtb	r3, r3
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	430b      	orrs	r3, r1
 8000644:	4909      	ldr	r1, [pc, #36]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000646:	4313      	orrs	r3, r2
 8000648:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064e:	f023 020f 	bic.w	r2, r3, #15
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	4904      	ldr	r1, [pc, #16]	; (800066c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800065a:	4313      	orrs	r3, r2
 800065c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4313      	orrs	r3, r2
 8000682:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4013      	ands	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006aa:	69da      	ldr	r2, [r3, #28]
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4013      	ands	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ee:	68fb      	ldr	r3, [r7, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <LL_SYSCFG_SetEXTISource+0x58>)
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3302      	adds	r3, #2
 8000712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	43db      	mvns	r3, r3
 800071c:	ea02 0103 	and.w	r1, r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	0c1b      	lsrs	r3, r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	fa93 f3a3 	rbit	r3, r3
 800072c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	fab3 f383 	clz	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	461a      	mov	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	fa03 f202 	lsl.w	r2, r3, r2
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <LL_SYSCFG_SetEXTISource+0x58>)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	430a      	orrs	r2, r1
 8000746:	3302      	adds	r3, #2
 8000748:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40010000 	.word	0x40010000

0800075c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <LL_FLASH_SetLatency+0x24>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f023 0207 	bic.w	r2, r3, #7
 800076c:	4904      	ldr	r1, [pc, #16]	; (8000780 <LL_FLASH_SetLatency+0x24>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	600b      	str	r3, [r1, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40022000 	.word	0x40022000

08000784 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <LL_FLASH_GetLatency+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 0307 	and.w	r3, r3, #7
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40022000 	.word	0x40022000

080007a0 <LL_TIM_SetOnePulseMode>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f023 0208 	bic.w	r2, r3, #8
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LL_TIM_DisableARRPreload>:
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <LL_TIM_OC_DisableFast>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d028      	beq.n	800084a <LL_TIM_OC_DisableFast+0x62>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	d023      	beq.n	8000846 <LL_TIM_OC_DisableFast+0x5e>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b10      	cmp	r3, #16
 8000802:	d01e      	beq.n	8000842 <LL_TIM_OC_DisableFast+0x5a>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	2b40      	cmp	r3, #64	; 0x40
 8000808:	d019      	beq.n	800083e <LL_TIM_OC_DisableFast+0x56>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000810:	d013      	beq.n	800083a <LL_TIM_OC_DisableFast+0x52>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000818:	d00d      	beq.n	8000836 <LL_TIM_OC_DisableFast+0x4e>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000820:	d007      	beq.n	8000832 <LL_TIM_OC_DisableFast+0x4a>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000828:	d101      	bne.n	800082e <LL_TIM_OC_DisableFast+0x46>
 800082a:	2307      	movs	r3, #7
 800082c:	e00e      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 800082e:	2308      	movs	r3, #8
 8000830:	e00c      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 8000832:	2306      	movs	r3, #6
 8000834:	e00a      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 8000836:	2305      	movs	r3, #5
 8000838:	e008      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 800083a:	2304      	movs	r3, #4
 800083c:	e006      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 800083e:	2303      	movs	r3, #3
 8000840:	e004      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 8000842:	2302      	movs	r3, #2
 8000844:	e002      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <LL_TIM_OC_DisableFast+0x64>
 800084a:	2300      	movs	r3, #0
 800084c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3318      	adds	r3, #24
 8000852:	4619      	mov	r1, r3
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <LL_TIM_OC_DisableFast+0x9c>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	440b      	add	r3, r1
 800085c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	4908      	ldr	r1, [pc, #32]	; (8000888 <LL_TIM_OC_DisableFast+0xa0>)
 8000866:	5ccb      	ldrb	r3, [r1, r3]
 8000868:	4619      	mov	r1, r3
 800086a:	2304      	movs	r3, #4
 800086c:	408b      	lsls	r3, r1
 800086e:	43db      	mvns	r3, r3
 8000870:	401a      	ands	r2, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	08002950 	.word	0x08002950
 8000888:	0800295c 	.word	0x0800295c

0800088c <LL_TIM_OC_EnablePreload>:
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d028      	beq.n	80008ee <LL_TIM_OC_EnablePreload+0x62>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d023      	beq.n	80008ea <LL_TIM_OC_EnablePreload+0x5e>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d01e      	beq.n	80008e6 <LL_TIM_OC_EnablePreload+0x5a>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b40      	cmp	r3, #64	; 0x40
 80008ac:	d019      	beq.n	80008e2 <LL_TIM_OC_EnablePreload+0x56>
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b4:	d013      	beq.n	80008de <LL_TIM_OC_EnablePreload+0x52>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008bc:	d00d      	beq.n	80008da <LL_TIM_OC_EnablePreload+0x4e>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008c4:	d007      	beq.n	80008d6 <LL_TIM_OC_EnablePreload+0x4a>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008cc:	d101      	bne.n	80008d2 <LL_TIM_OC_EnablePreload+0x46>
 80008ce:	2307      	movs	r3, #7
 80008d0:	e00e      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008d2:	2308      	movs	r3, #8
 80008d4:	e00c      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008d6:	2306      	movs	r3, #6
 80008d8:	e00a      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008da:	2305      	movs	r3, #5
 80008dc:	e008      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008de:	2304      	movs	r3, #4
 80008e0:	e006      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008e2:	2303      	movs	r3, #3
 80008e4:	e004      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e002      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <LL_TIM_OC_EnablePreload+0x64>
 80008ee:	2300      	movs	r3, #0
 80008f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3318      	adds	r3, #24
 80008f6:	4619      	mov	r1, r3
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LL_TIM_OC_EnablePreload+0x98>)
 80008fc:	5cd3      	ldrb	r3, [r2, r3]
 80008fe:	440b      	add	r3, r1
 8000900:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <LL_TIM_OC_EnablePreload+0x9c>)
 800090a:	5ccb      	ldrb	r3, [r1, r3]
 800090c:	4619      	mov	r1, r3
 800090e:	2308      	movs	r3, #8
 8000910:	408b      	lsls	r3, r1
 8000912:	431a      	orrs	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	08002950 	.word	0x08002950
 8000928:	0800295c 	.word	0x0800295c

0800092c <LL_TIM_SetClockSource>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	609a      	str	r2, [r3, #8]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <LL_TIM_SetTriggerOutput>:
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	605a      	str	r2, [r3, #4]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_TIM_DisableMasterSlaveMode>:
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	609a      	str	r2, [r3, #8]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f043 0201 	orr.w	r2, r3, #1
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3308      	adds	r3, #8
 80009f4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	e853 3f00 	ldrex	r3, [r3]
 80009fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3308      	adds	r3, #8
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	61ba      	str	r2, [r7, #24]
 8000a0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	e841 2300 	strex	r3, r2, [r1]
 8000a18:	613b      	str	r3, [r7, #16]
   return(result);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1e7      	bne.n	80009f0 <LL_USART_DisableIT_CTS+0x8>
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_GPIO_SetPinMode>:
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b089      	sub	sp, #36	; 0x24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa93 f3a3 	rbit	r3, r3
 8000a48:	613b      	str	r3, [r7, #16]
  return result;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fab3 f383 	clz	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2103      	movs	r1, #3
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	fa93 f3a3 	rbit	r3, r3
 8000a68:	61bb      	str	r3, [r7, #24]
  return result;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	fab3 f383 	clz	r3, r3
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	431a      	orrs	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3724      	adds	r7, #36	; 0x24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_GPIO_SetPinPull>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa93 f3a3 	rbit	r3, r3
 8000aa6:	613b      	str	r3, [r7, #16]
  return result;
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	fab3 f383 	clz	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	401a      	ands	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	fa93 f3a3 	rbit	r3, r3
 8000ac6:	61bb      	str	r3, [r7, #24]
  return result;
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	60da      	str	r2, [r3, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <LL_GPIO_ResetOutputPin>:
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fde0 	bl	80006d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b10:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000b14:	f7ff fdc4 	bl	80006a0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b18:	2007      	movs	r0, #7
 8000b1a:	f7ff fc05 	bl	8000328 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f80f 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 fa0d 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b26:	f000 f9b7 	bl	8000e98 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000b2a:	f000 f923 	bl	8000d74 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000b2e:	f000 f891 	bl	8000c54 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000b32:	f000 f84d 	bl	8000bd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  my_init();
 8000b36:	f7ff fbb3 	bl	80002a0 <my_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  my_loop();
 8000b3a:	f7ff fbed 	bl	8000318 <my_loop>
 8000b3e:	e7fc      	b.n	8000b3a <main+0x34>

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff fe09 	bl	800075c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff fe1a 	bl	8000784 <LL_FLASH_GetLatency>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d1fa      	bne.n	8000b4c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_EnableBypass();
 8000b56:	f7ff fc95 	bl	8000484 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8000b5a:	f7ff fca3 	bl	80004a4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b5e:	bf00      	nop
 8000b60:	f7ff fcb0 	bl	80004c4 <LL_RCC_HSE_IsReady>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d1fa      	bne.n	8000b60 <SystemClock_Config+0x20>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_8);
 8000b6a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8000b6e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b72:	f7ff fd59 	bl	8000628 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b76:	f7ff fd33 	bl	80005e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff fd40 	bl	8000600 <LL_RCC_PLL_IsReady>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d1fa      	bne.n	8000b7c <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fcd2 	bl	8000530 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000b8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b90:	f7ff fce2 	bl	8000558 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fcf3 	bl	8000580 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fca6 	bl	80004ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ba0:	bf00      	nop
 8000ba2:	f7ff fcb7 	bl	8000514 <LL_RCC_GetSysClkSource>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d1fa      	bne.n	8000ba2 <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 8000bac:	4807      	ldr	r0, [pc, #28]	; (8000bcc <SystemClock_Config+0x8c>)
 8000bae:	f001 fe79 	bl	80028a4 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <SystemClock_Config+0x8c>)
 8000bb4:	f001 fe84 	bl	80028c0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM17_CLKSOURCE_PCLK2);
 8000bb8:	f04f 5020 	mov.w	r0, #671088640	; 0x28000000
 8000bbc:	f7ff fcf4 	bl	80005a8 <LL_RCC_SetTIMClockSource>
  LL_RCC_SetTIMClockSource(LL_RCC_TIM16_CLKSOURCE_PCLK2);
 8000bc0:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8000bc4:	f7ff fcf0 	bl	80005a8 <LL_RCC_SetTIMClockSource>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	03d09000 	.word	0x03d09000

08000bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fd5b 	bl	80006a0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000bea:	f7ff fbc1 	bl	8000370 <__NVIC_GetPriorityGrouping>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fc11 	bl	800041c <NVIC_EncodePriority>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f7ff fbe2 	bl	80003c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f7ff fbc1 	bl	800038c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1999;
 8000c12:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000c16:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c24:	f001 f978 	bl	8001f18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000c28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c2c:	f7ff fdcb 	bl	80007c6 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c30:	2100      	movs	r1, #0
 8000c32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c36:	f7ff fe79 	bl	800092c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_CC1IF);
 8000c3a:	2130      	movs	r1, #48	; 0x30
 8000c3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c40:	f7ff fe89 	bl	8000956 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c48:	f7ff fe98 	bl	800097c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09e      	sub	sp, #120	; 0x78
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000c6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c6e:	2220      	movs	r2, #32
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fe58 	bl	8002928 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	2228      	movs	r2, #40	; 0x28
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fe51 	bl	8002928 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8000c96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c9a:	f7ff fd19 	bl	80006d0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 199;
 8000ca8:	23c7      	movs	r3, #199	; 0xc7
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8000cb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482d      	ldr	r0, [pc, #180]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000cbc:	f001 f92c 	bl	8001f18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000cc2:	f7ff fd80 	bl	80007c6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM16, LL_TIM_CHANNEL_CH1);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4829      	ldr	r0, [pc, #164]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000cca:	f7ff fddf 	bl	800088c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000cce:	2360      	movs	r3, #96	; 0x60
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 149;
 8000cda:	2395      	movs	r3, #149	; 0x95
 8000cdc:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM16, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000cee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000cf8:	f001 f976 	bl	8001fe8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM16, LL_TIM_CHANNEL_CH1);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000d00:	f7ff fd72 	bl	80007e8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM16, LL_TIM_ONEPULSEMODE_SINGLE);
 8000d04:	2108      	movs	r1, #8
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000d08:	f7ff fd4a 	bl	80007a0 <LL_TIM_SetOnePulseMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM16, &TIM_BDTRInitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_TIM16_Init+0x11c>)
 8000d38:	f001 f9b6 	bl	80020a8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d40:	f7ff fc96 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  /**TIM16 GPIO Configuration
  PA6   ------> TIM16_CH1
  */
  GPIO_InitStruct.Pin = X_STEP_Pin;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(X_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 fe30 	bl	80019c8 <LL_GPIO_Init>

}
 8000d68:	bf00      	nop
 8000d6a:	3778      	adds	r7, #120	; 0x78
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40014400 	.word	0x40014400

08000d74 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09e      	sub	sp, #120	; 0x78
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d8e:	2220      	movs	r2, #32
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fdc8 	bl	8002928 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2228      	movs	r2, #40	; 0x28
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fdc1 	bl	8002928 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 8000db6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000dba:	f7ff fc89 	bl	80006d0 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 199;
 8000dc8:	23c7      	movs	r3, #199	; 0xc7
 8000dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd8:	4619      	mov	r1, r3
 8000dda:	482d      	ldr	r0, [pc, #180]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000ddc:	f001 f89c 	bl	8001f18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8000de0:	482b      	ldr	r0, [pc, #172]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000de2:	f7ff fcf0 	bl	80007c6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM17, LL_TIM_CHANNEL_CH1);
 8000de6:	2101      	movs	r1, #1
 8000de8:	4829      	ldr	r0, [pc, #164]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000dea:	f7ff fd4f 	bl	800088c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 149;
 8000dfa:	2395      	movs	r3, #149	; 0x95
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e02:	2300      	movs	r3, #0
 8000e04:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM17, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000e0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e12:	461a      	mov	r2, r3
 8000e14:	2101      	movs	r1, #1
 8000e16:	481e      	ldr	r0, [pc, #120]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000e18:	f001 f8e6 	bl	8001fe8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM17, LL_TIM_CHANNEL_CH1);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000e20:	f7ff fce2 	bl	80007e8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOnePulseMode(TIM17, LL_TIM_ONEPULSEMODE_SINGLE);
 8000e24:	2108      	movs	r1, #8
 8000e26:	481a      	ldr	r0, [pc, #104]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000e28:	f7ff fcba 	bl	80007a0 <LL_TIM_SetOnePulseMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM17, &TIM_BDTRInitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_TIM17_Init+0x11c>)
 8000e58:	f001 f926 	bl	80020a8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e5c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e60:	f7ff fc06 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  /**TIM17 GPIO Configuration
  PB5   ------> TIM17_CH1
  */
  GPIO_InitStruct.Pin = Z_STEP_Pin;
 8000e64:	2320      	movs	r3, #32
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(Z_STEP_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_TIM17_Init+0x120>)
 8000e82:	f000 fda1 	bl	80019c8 <LL_GPIO_Init>

}
 8000e86:	bf00      	nop
 8000e88:	3778      	adds	r7, #120	; 0x78
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40014800 	.word	0x40014800
 8000e94:	48000400 	.word	0x48000400

08000e98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ec2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ec6:	f7ff fbeb 	bl	80006a0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000eca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ece:	f7ff fbcf 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f000 fd69 	bl	80019c8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000ef6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000efa:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0xa4>)
 8000f1c:	f001 fc3c 	bl	8002798 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0xa4>)
 8000f22:	f7ff fd61 	bl	80009e8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0xa4>)
 8000f28:	f7ff fd48 	bl	80009bc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_USART2_UART_Init+0xa4>)
 8000f2e:	f7ff fd35 	bl	800099c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3738      	adds	r7, #56	; 0x38
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000f62:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f66:	f7ff fb83 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000f6a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f6e:	f7ff fb7f 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f76:	f7ff fb7b 	bl	8000670 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f7e:	f7ff fb77 	bl	8000670 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, X_ENABLE_Pin|Z_ENABLE_Pin|LASER_ENABLE_Pin|X_DIR_Pin);
 8000f82:	f244 0116 	movw	r1, #16406	; 0x4016
 8000f86:	4861      	ldr	r0, [pc, #388]	; (800110c <MX_GPIO_Init+0x1cc>)
 8000f88:	f7ff fdaf 	bl	8000aea <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Z_DIR_GPIO_Port, Z_DIR_Pin);
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f7ff fda9 	bl	8000aea <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000f98:	495d      	ldr	r1, [pc, #372]	; (8001110 <MX_GPIO_Init+0x1d0>)
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fbb0 	bl	8000700 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000fa0:	495c      	ldr	r1, [pc, #368]	; (8001114 <MX_GPIO_Init+0x1d4>)
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff fbac 	bl	8000700 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 8000fa8:	495b      	ldr	r1, [pc, #364]	; (8001118 <MX_GPIO_Init+0x1d8>)
 8000faa:	2002      	movs	r0, #2
 8000fac:	f7ff fba8 	bl	8000700 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	4859      	ldr	r0, [pc, #356]	; (800111c <MX_GPIO_Init+0x1dc>)
 8000fb8:	f7ff fd68 	bl	8000a8c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(Z_END_GPIO_Port, Z_END_Pin, LL_GPIO_PULL_UP);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc2:	4852      	ldr	r0, [pc, #328]	; (800110c <MX_GPIO_Init+0x1cc>)
 8000fc4:	f7ff fd62 	bl	8000a8c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(X_END_GPIO_Port, X_END_Pin, LL_GPIO_PULL_UP);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	4853      	ldr	r0, [pc, #332]	; (800111c <MX_GPIO_Init+0x1dc>)
 8000fce:	f7ff fd5d 	bl	8000a8c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd8:	4850      	ldr	r0, [pc, #320]	; (800111c <MX_GPIO_Init+0x1dc>)
 8000fda:	f7ff fd28 	bl	8000a2e <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(Z_END_GPIO_Port, Z_END_Pin, LL_GPIO_MODE_INPUT);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe4:	4849      	ldr	r0, [pc, #292]	; (800110c <MX_GPIO_Init+0x1cc>)
 8000fe6:	f7ff fd22 	bl	8000a2e <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(X_END_GPIO_Port, X_END_Pin, LL_GPIO_MODE_INPUT);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	484b      	ldr	r0, [pc, #300]	; (800111c <MX_GPIO_Init+0x1dc>)
 8000ff0:	f7ff fd1d 	bl	8000a2e <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800100a:	2302      	movs	r3, #2
 800100c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fadf 	bl	80015d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001024:	2301      	movs	r3, #1
 8001026:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001030:	2302      	movs	r3, #2
 8001032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4618      	mov	r0, r3
 800103c:	f000 facc 	bl	80015d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001054:	2302      	movs	r3, #2
 8001056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4618      	mov	r0, r3
 8001060:	f000 faba 	bl	80015d8 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = X_ENABLE_Pin|Z_ENABLE_Pin;
 8001064:	2306      	movs	r3, #6
 8001066:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001068:	2301      	movs	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4823      	ldr	r0, [pc, #140]	; (800110c <MX_GPIO_Init+0x1cc>)
 800107e:	f000 fca3 	bl	80019c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LASER_ENABLE_Pin|X_DIR_Pin;
 8001082:	f244 0310 	movw	r3, #16400	; 0x4010
 8001086:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001088:	2301      	movs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	481b      	ldr	r0, [pc, #108]	; (800110c <MX_GPIO_Init+0x1cc>)
 800109e:	f000 fc93 	bl	80019c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Z_DIR_Pin;
 80010a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010a8:	2301      	movs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Z_DIR_GPIO_Port, &GPIO_InitStruct);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f000 fc82 	bl	80019c8 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010c4:	f7ff f954 	bl	8000370 <__NVIC_GetPriorityGrouping>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9a4 	bl	800041c <NVIC_EncodePriority>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	2017      	movs	r0, #23
 80010da:	f7ff f975 	bl	80003c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010de:	2017      	movs	r0, #23
 80010e0:	f7ff f954 	bl	800038c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010e4:	f7ff f944 	bl	8000370 <__NVIC_GetPriorityGrouping>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f994 	bl	800041c <NVIC_EncodePriority>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4619      	mov	r1, r3
 80010f8:	2028      	movs	r0, #40	; 0x28
 80010fa:	f7ff f965 	bl	80003c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	; 0x28
 8001100:	f7ff f944 	bl	800038c <__NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	48000400 	.word	0x48000400
 8001110:	00f00003 	.word	0x00f00003
 8001114:	f0000003 	.word	0xf0000003
 8001118:	f0000001 	.word	0xf0000001
 800111c:	48000800 	.word	0x48000800

08001120 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <LL_EXTI_DisableIT_0_31+0x24>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	43db      	mvns	r3, r3
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <LL_EXTI_DisableIT_0_31+0x24>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40010400 	.word	0x40010400

08001148 <handle_endstop_x>:

bool homed_x = false;
bool homed_y = false;
bool is_homing = false;

inline void handle_endstop_x() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	if (is_homing) {
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <handle_endstop_x+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <handle_endstop_x+0x18>
		DISABLE_ENDSTOP_X;
 8001154:	2080      	movs	r0, #128	; 0x80
 8001156:	f7ff ffe3 	bl	8001120 <LL_EXTI_DisableIT_0_31>
		homed_x = true;
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <handle_endstop_x+0x20>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000022 	.word	0x20000022
 8001168:	20000020 	.word	0x20000020

0800116c <handle_endstop_y>:

inline void handle_endstop_y() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	//DO_STEP_Y;
	if (is_homing) {
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <handle_endstop_y+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <handle_endstop_y+0x1a>
		DISABLE_ENDSTOP_Y;
 8001178:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800117c:	f7ff ffd0 	bl	8001120 <LL_EXTI_DisableIT_0_31>
		homed_y = true;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <handle_endstop_y+0x24>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	}
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000022 	.word	0x20000022
 8001190:	20000021 	.word	0x20000021

08001194 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4013      	ands	r3, r2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40010400 	.word	0x40010400

080011c0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6153      	str	r3, [r2, #20]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40010400 	.word	0x40010400

080011e0 <LL_TIM_EnableCounter>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_TIM_ClearFlag_CC1>:
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f06f 0202 	mvn.w	r2, #2
 800120e:	611a      	str	r2, [r3, #16]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001276:	2080      	movs	r0, #128	; 0x80
 8001278:	f7ff ff8c 	bl	8001194 <LL_EXTI_IsActiveFlag_0_31>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001282:	2080      	movs	r0, #128	; 0x80
 8001284:	f7ff ff9c 	bl	80011c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */
    //LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
    handle_endstop_x();
 8001288:	f7ff ff5e 	bl	8001148 <handle_endstop_x>
    /* USER CODE END LL_EXTI_LINE_7 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_CC1(TIM2);
 8001294:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001298:	f7ff ffb2 	bl	8001200 <LL_TIM_ClearFlag_CC1>
	tim2Tick++;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <TIM2_IRQHandler+0x30>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <TIM2_IRQHandler+0x30>)
 80012a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

	if (tim2Tick >= 10) {
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <TIM2_IRQHandler+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d905      	bls.n	80012ba <TIM2_IRQHandler+0x2a>
		DO_STEP_Y;
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <TIM2_IRQHandler+0x34>)
 80012b0:	f7ff ff96 	bl	80011e0 <LL_TIM_EnableCounter>
		tim2Tick = 0;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <TIM2_IRQHandler+0x30>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000024 	.word	0x20000024
 80012c4:	40014800 	.word	0x40014800

080012c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80012cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012d0:	f7ff ff60 	bl	8001194 <LL_EXTI_IsActiveFlag_0_31>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80012da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012de:	f7ff ff6f 	bl	80011c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80012e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e6:	f7ff ff55 	bl	8001194 <LL_EXTI_IsActiveFlag_0_31>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <EXTI15_10_IRQHandler+0x34>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80012f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012f4:	f7ff ff64 	bl	80011c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
    handle_endstop_y();
 80012f8:	f7ff ff38 	bl	800116c <handle_endstop_y>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134e:	f7ff ffd7 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f001 fac5 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff fbd6 	bl	8000b06 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800135c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001368:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 800136c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001370:	20000028 	.word	0x20000028

08001374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_IRQHandler>
	...

08001378 <LL_EXTI_EnableIT_0_31>:
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <LL_EXTI_EnableIT_0_31+0x20>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4904      	ldr	r1, [pc, #16]	; (8001398 <LL_EXTI_EnableIT_0_31+0x20>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <LL_EXTI_EnableIT_32_63>:
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <LL_EXTI_EnableIT_32_63+0x20>)
 80013a6:	6a1a      	ldr	r2, [r3, #32]
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <LL_EXTI_EnableIT_32_63+0x20>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	620b      	str	r3, [r1, #32]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40010400 	.word	0x40010400

080013c0 <LL_EXTI_DisableIT_0_31>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4904      	ldr	r1, [pc, #16]	; (80013e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40010400 	.word	0x40010400

080013e8 <LL_EXTI_DisableIT_32_63>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <LL_EXTI_DisableIT_32_63+0x24>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4904      	ldr	r1, [pc, #16]	; (800140c <LL_EXTI_DisableIT_32_63+0x24>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	620b      	str	r3, [r1, #32]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40010400 	.word	0x40010400

08001410 <LL_EXTI_EnableEvent_0_31>:
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <LL_EXTI_EnableEvent_0_31+0x20>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <LL_EXTI_EnableEvent_0_31+0x20>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <LL_EXTI_EnableEvent_32_63>:
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_EXTI_EnableEvent_32_63+0x20>)
 800143e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001440:	4904      	ldr	r1, [pc, #16]	; (8001454 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4313      	orrs	r3, r2
 8001446:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40010400 	.word	0x40010400

08001458 <LL_EXTI_DisableEvent_0_31>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	43db      	mvns	r3, r3
 8001468:	4904      	ldr	r1, [pc, #16]	; (800147c <LL_EXTI_DisableEvent_0_31+0x24>)
 800146a:	4013      	ands	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40010400 	.word	0x40010400

08001480 <LL_EXTI_DisableEvent_32_63>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800148a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	43db      	mvns	r3, r3
 8001490:	4904      	ldr	r1, [pc, #16]	; (80014a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001492:	4013      	ands	r3, r2
 8001494:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40010400 	.word	0x40010400

080014a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4904      	ldr	r1, [pc, #16]	; (80014c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40010400 	.word	0x40010400

080014cc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80014d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40010400 	.word	0x40010400

080014f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	43db      	mvns	r3, r3
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001502:	4013      	ands	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40010400 	.word	0x40010400

08001518 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	43db      	mvns	r3, r3
 8001528:	4904      	ldr	r1, [pc, #16]	; (800153c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800152a:	4013      	ands	r3, r2
 800152c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40010400 	.word	0x40010400

08001540 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40010400 	.word	0x40010400

08001564 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4313      	orrs	r3, r2
 8001576:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40010400 	.word	0x40010400

08001588 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	43db      	mvns	r3, r3
 8001598:	4904      	ldr	r1, [pc, #16]	; (80015ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800159a:	4013      	ands	r3, r2
 800159c:	60cb      	str	r3, [r1, #12]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40010400 	.word	0x40010400

080015b0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	43db      	mvns	r3, r3
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40010400 	.word	0x40010400

080015d8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7a1b      	ldrb	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80cd 	beq.w	8001788 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d061      	beq.n	80016ba <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7a5b      	ldrb	r3, [r3, #9]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d01c      	beq.n	8001638 <LL_EXTI_Init+0x60>
 80015fe:	2b02      	cmp	r3, #2
 8001600:	dc25      	bgt.n	800164e <LL_EXTI_Init+0x76>
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <LL_EXTI_Init+0x34>
 8001606:	2b01      	cmp	r3, #1
 8001608:	d00b      	beq.n	8001622 <LL_EXTI_Init+0x4a>
 800160a:	e020      	b.n	800164e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff21 	bl	8001458 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff feac 	bl	8001378 <LL_EXTI_EnableIT_0_31>
          break;
 8001620:	e018      	b.n	8001654 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff feca 	bl	80013c0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff feed 	bl	8001410 <LL_EXTI_EnableEvent_0_31>
          break;
 8001636:	e00d      	b.n	8001654 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe9b 	bl	8001378 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fee2 	bl	8001410 <LL_EXTI_EnableEvent_0_31>
          break;
 800164c:	e002      	b.n	8001654 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
          break;
 8001652:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7a9b      	ldrb	r3, [r3, #10]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7a9b      	ldrb	r3, [r3, #10]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d01c      	beq.n	800169e <LL_EXTI_Init+0xc6>
 8001664:	2b03      	cmp	r3, #3
 8001666:	dc25      	bgt.n	80016b4 <LL_EXTI_Init+0xdc>
 8001668:	2b01      	cmp	r3, #1
 800166a:	d002      	beq.n	8001672 <LL_EXTI_Init+0x9a>
 800166c:	2b02      	cmp	r3, #2
 800166e:	d00b      	beq.n	8001688 <LL_EXTI_Init+0xb0>
 8001670:	e020      	b.n	80016b4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff86 	bl	8001588 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff11 	bl	80014a8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001686:	e019      	b.n	80016bc <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff2f 	bl	80014f0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff52 	bl	8001540 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800169c:	e00e      	b.n	80016bc <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff00 	bl	80014a8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff47 	bl	8001540 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80016b2:	e003      	b.n	80016bc <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
            break;
 80016b8:	e000      	b.n	80016bc <LL_EXTI_Init+0xe4>
        }
      }
 80016ba:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d076      	beq.n	80017b2 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7a5b      	ldrb	r3, [r3, #9]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d01c      	beq.n	8001706 <LL_EXTI_Init+0x12e>
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	dc25      	bgt.n	800171c <LL_EXTI_Init+0x144>
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <LL_EXTI_Init+0x102>
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00b      	beq.n	80016f0 <LL_EXTI_Init+0x118>
 80016d8:	e020      	b.n	800171c <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fece 	bl	8001480 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe57 	bl	800139c <LL_EXTI_EnableIT_32_63>
          break;
 80016ee:	e018      	b.n	8001722 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fe77 	bl	80013e8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fe98 	bl	8001434 <LL_EXTI_EnableEvent_32_63>
          break;
 8001704:	e00d      	b.n	8001722 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fe46 	bl	800139c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fe8d 	bl	8001434 <LL_EXTI_EnableEvent_32_63>
          break;
 800171a:	e002      	b.n	8001722 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
          break;
 8001720:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7a9b      	ldrb	r3, [r3, #10]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d043      	beq.n	80017b2 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7a9b      	ldrb	r3, [r3, #10]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d01c      	beq.n	800176c <LL_EXTI_Init+0x194>
 8001732:	2b03      	cmp	r3, #3
 8001734:	dc25      	bgt.n	8001782 <LL_EXTI_Init+0x1aa>
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <LL_EXTI_Init+0x168>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d00b      	beq.n	8001756 <LL_EXTI_Init+0x17e>
 800173e:	e020      	b.n	8001782 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff33 	bl	80015b0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff febc 	bl	80014cc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001754:	e02e      	b.n	80017b4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fedc 	bl	8001518 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fefd 	bl	8001564 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800176a:	e023      	b.n	80017b4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff feab 	bl	80014cc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fef2 	bl	8001564 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001780:	e018      	b.n	80017b4 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
            break;
 8001786:	e015      	b.n	80017b4 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe17 	bl	80013c0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fe5e 	bl	8001458 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe21 	bl	80013e8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe68 	bl	8001480 <LL_EXTI_DisableEvent_32_63>
 80017b0:	e000      	b.n	80017b4 <LL_EXTI_Init+0x1dc>
      }
 80017b2:	bf00      	nop
#endif
  }
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <LL_GPIO_SetPinMode>:
{
 80017be:	b480      	push	{r7}
 80017c0:	b089      	sub	sp, #36	; 0x24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	613b      	str	r3, [r7, #16]
  return result;
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2103      	movs	r1, #3
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	61bb      	str	r3, [r7, #24]
  return result;
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	431a      	orrs	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	3724      	adds	r7, #36	; 0x24
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_GPIO_SetPinOutputType>:
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	43db      	mvns	r3, r3
 8001830:	401a      	ands	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	431a      	orrs	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_GPIO_SetPinSpeed>:
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	613b      	str	r3, [r7, #16]
  return result;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2103      	movs	r1, #3
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	61bb      	str	r3, [r7, #24]
  return result;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	609a      	str	r2, [r3, #8]
}
 800189e:	bf00      	nop
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_GPIO_SetPinPull>:
{
 80018aa:	b480      	push	{r7}
 80018ac:	b089      	sub	sp, #36	; 0x24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	613b      	str	r3, [r7, #16]
  return result;
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2103      	movs	r1, #3
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	401a      	ands	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	61bb      	str	r3, [r7, #24]
  return result;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	fab3 f383 	clz	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	60da      	str	r2, [r3, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3724      	adds	r7, #36	; 0x24
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_GPIO_SetAFPin_0_7>:
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	613b      	str	r3, [r7, #16]
  return result;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	210f      	movs	r1, #15
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	401a      	ands	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	61bb      	str	r3, [r7, #24]
  return result;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	621a      	str	r2, [r3, #32]
}
 800195a:	bf00      	nop
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_GPIO_SetAFPin_8_15>:
{
 8001966:	b480      	push	{r7}
 8001968:	b089      	sub	sp, #36	; 0x24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	613b      	str	r3, [r7, #16]
  return result;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	210f      	movs	r1, #15
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	61bb      	str	r3, [r7, #24]
  return result;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	431a      	orrs	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019bc:	bf00      	nop
 80019be:	3724      	adds	r7, #36	; 0x24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	613b      	str	r3, [r7, #16]
  return result;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80019ea:	e051      	b.n	8001a90 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d043      	beq.n	8001a8a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d003      	beq.n	8001a12 <LL_GPIO_Init+0x4a>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d10e      	bne.n	8001a30 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	461a      	mov	r2, r3
 8001a18:	69b9      	ldr	r1, [r7, #24]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff16 	bl	800184c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6819      	ldr	r1, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fef6 	bl	800181c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	461a      	mov	r2, r3
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff36 	bl	80018aa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d11a      	bne.n	8001a7c <LL_GPIO_Init+0xb4>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	fa93 f3a3 	rbit	r3, r3
 8001a50:	60bb      	str	r3, [r7, #8]
  return result;
 8001a52:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	d807      	bhi.n	8001a6e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	461a      	mov	r2, r3
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff4e 	bl	8001908 <LL_GPIO_SetAFPin_0_7>
 8001a6c:	e006      	b.n	8001a7c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	461a      	mov	r2, r3
 8001a74:	69b9      	ldr	r1, [r7, #24]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff75 	bl	8001966 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	461a      	mov	r2, r3
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fe9a 	bl	80017be <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1a6      	bne.n	80019ec <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <LL_RCC_HSI_IsReady>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <LL_RCC_HSI_IsReady+0x20>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_RCC_LSE_IsReady>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <LL_RCC_LSE_IsReady+0x20>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_GetSysClkSource>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <LL_RCC_GetSysClkSource+0x18>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_RCC_GetAHBPrescaler>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <LL_RCC_GetAHBPrescaler+0x18>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000

08001b28 <LL_RCC_GetAPB1Prescaler>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <LL_RCC_GetAPB2Prescaler>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <LL_RCC_GetUSARTClockSource>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <LL_RCC_GetUSARTClockSource+0x28>)
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	4313      	orrs	r3, r2
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000

08001b8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <LL_RCC_PLL_GetPrediv+0x18>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f003 030f 	and.w	r3, r3, #15
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000

08001be0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001be8:	f000 f864 	bl	8001cb4 <RCC_GetSystemClockFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f882 	bl	8001d00 <RCC_GetHCLKClockFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f890 	bl	8001d2c <RCC_GetPCLK1ClockFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f89c 	bl	8001d54 <RCC_GetPCLK2ClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12d      	bne.n	8001c9a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ff8e 	bl	8001b60 <LL_RCC_GetUSARTClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d00a      	beq.n	8001c60 <LL_RCC_GetUSARTClockFreq+0x34>
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d819      	bhi.n	8001c82 <LL_RCC_GetUSARTClockFreq+0x56>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d002      	beq.n	8001c58 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d00c      	beq.n	8001c70 <LL_RCC_GetUSARTClockFreq+0x44>
 8001c56:	e014      	b.n	8001c82 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c58:	f000 f82c 	bl	8001cb4 <RCC_GetSystemClockFreq>
 8001c5c:	60f8      	str	r0, [r7, #12]
        break;
 8001c5e:	e021      	b.n	8001ca4 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001c60:	f7ff ff22 	bl	8001aa8 <LL_RCC_HSI_IsReady>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d019      	beq.n	8001c9e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001c6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c6e:	e016      	b.n	8001c9e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001c70:	f7ff ff2c 	bl	8001acc <LL_RCC_LSE_IsReady>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d013      	beq.n	8001ca2 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c80:	e00f      	b.n	8001ca2 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c82:	f000 f817 	bl	8001cb4 <RCC_GetSystemClockFreq>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f839 	bl	8001d00 <RCC_GetHCLKClockFreq>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f84b 	bl	8001d2c <RCC_GetPCLK1ClockFreq>
 8001c96:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001c98:	e004      	b.n	8001ca4 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001c9a:	bf00      	nop
 8001c9c:	e002      	b.n	8001ca4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001c9e:	bf00      	nop
 8001ca0:	e000      	b.n	8001ca4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001ca2:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001cbe:	f7ff ff17 	bl	8001af0 <LL_RCC_GetSysClkSource>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d00c      	beq.n	8001ce2 <RCC_GetSystemClockFreq+0x2e>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d80e      	bhi.n	8001cea <RCC_GetSystemClockFreq+0x36>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <RCC_GetSystemClockFreq+0x22>
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d003      	beq.n	8001cdc <RCC_GetSystemClockFreq+0x28>
 8001cd4:	e009      	b.n	8001cea <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <RCC_GetSystemClockFreq+0x48>)
 8001cd8:	607b      	str	r3, [r7, #4]
      break;
 8001cda:	e009      	b.n	8001cf0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <RCC_GetSystemClockFreq+0x48>)
 8001cde:	607b      	str	r3, [r7, #4]
      break;
 8001ce0:	e006      	b.n	8001cf0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001ce2:	f000 f84b 	bl	8001d7c <RCC_PLL_GetFreqDomain_SYS>
 8001ce6:	6078      	str	r0, [r7, #4]
      break;
 8001ce8:	e002      	b.n	8001cf0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <RCC_GetSystemClockFreq+0x48>)
 8001cec:	607b      	str	r3, [r7, #4]
      break;
 8001cee:	bf00      	nop
  }

  return frequency;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d08:	f7ff ff00 	bl	8001b0c <LL_RCC_GetAHBPrescaler>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <RCC_GetHCLKClockFreq+0x28>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	40d3      	lsrs	r3, r2
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08002968 	.word	0x08002968

08001d2c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d34:	f7ff fef8 	bl	8001b28 <LL_RCC_GetAPB1Prescaler>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <RCC_GetPCLK1ClockFreq+0x24>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	40d3      	lsrs	r3, r2
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	08002978 	.word	0x08002978

08001d54 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001d5c:	f7ff fef2 	bl	8001b44 <LL_RCC_GetAPB2Prescaler>
 8001d60:	4603      	mov	r3, r0
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <RCC_GetPCLK2ClockFreq+0x24>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	40d3      	lsrs	r3, r2
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08002978 	.word	0x08002978

08001d7c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001d8a:	f7ff feff 	bl	8001b8c <LL_RCC_PLL_GetMainSource>
 8001d8e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d003      	beq.n	8001da6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001d9e:	e005      	b.n	8001dac <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001da2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001da4:	e005      	b.n	8001db2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001da8:	60fb      	str	r3, [r7, #12]
      break;
 8001daa:	e002      	b.n	8001db2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001dae:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001db0:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001db2:	f7ff ff07 	bl	8001bc4 <LL_RCC_PLL_GetPrediv>
 8001db6:	4603      	mov	r3, r0
 8001db8:	3301      	adds	r3, #1
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	fbb2 f4f3 	udiv	r4, r2, r3
 8001dc0:	f7ff fef2 	bl	8001ba8 <LL_RCC_PLL_GetMultiplicator>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dca:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dce:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	fa92 f2a2 	rbit	r2, r2
 8001dd6:	603a      	str	r2, [r7, #0]
  return result;
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	fab2 f282 	clz	r2, r2
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	40d3      	lsrs	r3, r2
 8001de2:	3302      	adds	r3, #2
 8001de4:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}
 8001df0:	003d0900 	.word	0x003d0900
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <LL_TIM_SetPrescaler>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_TIM_SetAutoReload>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_TIM_SetRepetitionCounter>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_TIM_OC_SetCompareCH1>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_TIM_OC_SetCompareCH2>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_TIM_OC_SetCompareCH3>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_TIM_OC_SetCompareCH4>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_TIM_OC_SetCompareCH5>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_TIM_OC_SetCompareCH6>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	615a      	str	r2, [r3, #20]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2b      	ldr	r2, [pc, #172]	; (8001fd8 <LL_TIM_Init+0xc0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <LL_TIM_Init+0x20>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d106      	bne.n	8001f46 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <LL_TIM_Init+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00f      	beq.n	8001f6e <LL_TIM_Init+0x56>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d00b      	beq.n	8001f6e <LL_TIM_Init+0x56>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <LL_TIM_Init+0xc4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <LL_TIM_Init+0x56>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <LL_TIM_Init+0xc8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <LL_TIM_Init+0x56>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <LL_TIM_Init+0xcc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d106      	bne.n	8001f7c <LL_TIM_Init+0x64>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff43 	bl	8001e14 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff2f 	bl	8001df8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <LL_TIM_Init+0xc0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00b      	beq.n	8001fba <LL_TIM_Init+0xa2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <LL_TIM_Init+0xc4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <LL_TIM_Init+0xa2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <LL_TIM_Init+0xc8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <LL_TIM_Init+0xa2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LL_TIM_Init+0xcc>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d105      	bne.n	8001fc6 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff35 	bl	8001e30 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff96 	bl	8001ef8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40014000 	.word	0x40014000
 8001fe0:	40014400 	.word	0x40014400
 8001fe4:	40014800 	.word	0x40014800

08001fe8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffe:	d045      	beq.n	800208c <LL_TIM_OC_Init+0xa4>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002006:	d848      	bhi.n	800209a <LL_TIM_OC_Init+0xb2>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d036      	beq.n	800207e <LL_TIM_OC_Init+0x96>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d840      	bhi.n	800209a <LL_TIM_OC_Init+0xb2>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201e:	d027      	beq.n	8002070 <LL_TIM_OC_Init+0x88>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002026:	d838      	bhi.n	800209a <LL_TIM_OC_Init+0xb2>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202e:	d018      	beq.n	8002062 <LL_TIM_OC_Init+0x7a>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	d830      	bhi.n	800209a <LL_TIM_OC_Init+0xb2>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d003      	beq.n	8002046 <LL_TIM_OC_Init+0x5e>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b10      	cmp	r3, #16
 8002042:	d007      	beq.n	8002054 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002044:	e029      	b.n	800209a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f89d 	bl	8002188 <OC1Config>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
      break;
 8002052:	e023      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f910 	bl	800227c <OC2Config>
 800205c:	4603      	mov	r3, r0
 800205e:	75fb      	strb	r3, [r7, #23]
      break;
 8002060:	e01c      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f987 	bl	8002378 <OC3Config>
 800206a:	4603      	mov	r3, r0
 800206c:	75fb      	strb	r3, [r7, #23]
      break;
 800206e:	e015      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f9fe 	bl	8002474 <OC4Config>
 8002078:	4603      	mov	r3, r0
 800207a:	75fb      	strb	r3, [r7, #23]
      break;
 800207c:	e00e      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fa5d 	bl	8002540 <OC5Config>
 8002086:	4603      	mov	r3, r0
 8002088:	75fb      	strb	r3, [r7, #23]
      break;
 800208a:	e007      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fab4 	bl	80025fc <OC6Config>
 8002094:	4603      	mov	r3, r0
 8002096:	75fb      	strb	r3, [r7, #23]
      break;
 8002098:	e000      	b.n	800209c <LL_TIM_OC_Init+0xb4>
      break;
 800209a:	bf00      	nop
  }

  return result;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	7b12      	ldrb	r2, [r2, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	89d2      	ldrh	r2, [r2, #14]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a16      	ldr	r2, [pc, #88]	; (8002184 <LL_TIM_BDTR_Init+0xdc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d106      	bne.n	800213c <LL_TIM_BDTR_Init+0x94>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BKF */
#if defined(TIM_BDTR_BK2E)

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <LL_TIM_BDTR_Init+0xdc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d114      	bne.n	800216e <LL_TIM_BDTR_Init+0xc6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40012c00 	.word	0x40012c00

08002188 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f023 0201 	bic.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f023 0202 	bic.w	r2, r3, #2
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <OC1Config+0xe4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <OC1Config+0x7e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <OC1Config+0xe8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <OC1Config+0x7e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <OC1Config+0xec>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <OC1Config+0x7e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <OC1Config+0xf0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d11e      	bne.n	8002244 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f023 0208 	bic.w	r2, r3, #8
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f023 0204 	bic.w	r2, r3, #4
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fdf8 	bl	8001e4c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800

0800227c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f023 0210 	bic.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	0212      	lsls	r2, r2, #8
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0220 	bic.w	r2, r3, #32
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0210 	bic.w	r2, r3, #16
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <OC2Config+0xec>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00b      	beq.n	8002300 <OC2Config+0x84>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <OC2Config+0xf0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <OC2Config+0x84>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <OC2Config+0xf4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <OC2Config+0x84>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <OC2Config+0xf8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d11f      	bne.n	8002340 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	019b      	lsls	r3, r3, #6
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	019b      	lsls	r3, r3, #6
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fd88 	bl	8001e68 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40014000 	.word	0x40014000
 8002370:	40014400 	.word	0x40014400
 8002374:	40014800 	.word	0x40014800

08002378 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a21      	ldr	r2, [pc, #132]	; (8002464 <OC3Config+0xec>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00b      	beq.n	80023fa <OC3Config+0x82>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <OC3Config+0xf0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <OC3Config+0x82>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1f      	ldr	r2, [pc, #124]	; (800246c <OC3Config+0xf4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <OC3Config+0x82>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <OC3Config+0xf8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d11f      	bne.n	800243a <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	029b      	lsls	r3, r3, #10
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	015b      	lsls	r3, r3, #5
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fd19 	bl	8001e84 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40012c00 	.word	0x40012c00
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800

08002474 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	0212      	lsls	r2, r2, #8
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	031b      	lsls	r3, r3, #12
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	031b      	lsls	r3, r3, #12
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <OC4Config+0xbc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00b      	beq.n	80024f8 <OC4Config+0x84>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a14      	ldr	r2, [pc, #80]	; (8002534 <OC4Config+0xc0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <OC4Config+0x84>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <OC4Config+0xc4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <OC4Config+0x84>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <OC4Config+0xc8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d107      	bne.n	8002508 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	019b      	lsls	r3, r3, #6
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fcc0 	bl	8001ea0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40014000 	.word	0x40014000
 8002538:	40014400 	.word	0x40014400
 800253c:	40014800 	.word	0x40014800

08002540 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <OC5Config+0xac>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00b      	beq.n	80025b4 <OC5Config+0x74>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <OC5Config+0xb0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <OC5Config+0x74>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <OC5Config+0xb4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <OC5Config+0x74>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <OC5Config+0xb8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d109      	bne.n	80025c8 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fc71 	bl	8001ebc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800

080025fc <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	0212      	lsls	r2, r2, #8
 800262e:	4313      	orrs	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	051b      	lsls	r3, r3, #20
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	051b      	lsls	r3, r3, #20
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <OC6Config+0xac>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00b      	beq.n	8002672 <OC6Config+0x76>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <OC6Config+0xb0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <OC6Config+0x76>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <OC6Config+0xb4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <OC6Config+0x76>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <OC6Config+0xb8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d109      	bne.n	8002686 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fc22 	bl	8001edc <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800

080026b8 <LL_USART_IsEnabled>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <LL_USART_IsEnabled+0x18>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <LL_USART_IsEnabled+0x1a>
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_USART_SetStopBitsLength>:
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	605a      	str	r2, [r3, #4]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_USART_SetHWFlowCtrl>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_USART_SetBaudRate>:
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273e:	d11a      	bne.n	8002776 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	005a      	lsls	r2, r3, #1
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	441a      	add	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	b29b      	uxth	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	60da      	str	r2, [r3, #12]
}
 8002774:	e00a      	b.n	800278c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	085a      	lsrs	r2, r3, #1
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	441a      	add	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff84 	bl	80026b8 <LL_USART_IsEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d14e      	bne.n	8002854 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <LL_USART_Init+0xc8>)
 80027bc:	4013      	ands	r3, r2
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	6851      	ldr	r1, [r2, #4]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	6912      	ldr	r2, [r2, #16]
 80027cc:	4311      	orrs	r1, r2
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6992      	ldr	r2, [r2, #24]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff7c 	bl	80026de <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff89 	bl	8002704 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <LL_USART_Init+0xcc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d104      	bne.n	8002804 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff fa16 	bl	8001c2c <LL_RCC_GetUSARTClockFreq>
 8002800:	61b8      	str	r0, [r7, #24]
 8002802:	e016      	b.n	8002832 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <LL_USART_Init+0xd0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d107      	bne.n	800281c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f9e5 	bl	8001be0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	e00a      	b.n	8002832 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <LL_USART_Init+0xd4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d106      	bne.n	8002832 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f9d9 	bl	8001be0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69b9      	ldr	r1, [r7, #24]
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ff6b 	bl	800272a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002854:	7ffb      	ldrb	r3, [r7, #31]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	efff69f3 	.word	0xefff69f3
 8002864:	40013800 	.word	0x40013800
 8002868:	40004400 	.word	0x40004400
 800286c:	40004800 	.word	0x40004800

08002870 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <LL_InitTick+0x30>)
 8002884:	3b01      	subs	r3, #1
 8002886:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <LL_InitTick+0x30>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <LL_InitTick+0x30>)
 8002890:	2205      	movs	r2, #5
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80028ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ffdd 	bl	8002870 <LL_InitTick>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <LL_SetSystemCoreClock+0x1c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	; (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	; (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f820 	bl	8002938 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002980 	.word	0x08002980
 800291c:	08002980 	.word	0x08002980
 8002920:	08002980 	.word	0x08002980
 8002924:	08002984 	.word	0x08002984

08002928 <memset>:
 8002928:	4402      	add	r2, r0
 800292a:	4603      	mov	r3, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
