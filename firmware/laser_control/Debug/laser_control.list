
laser_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001688  08001688  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001688  08001688  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001688  08001688  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001688  08001688  00011688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001694  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001694  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003856  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f5d  00000000  00000000  0002388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  00024d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015671  00000000  00000000  00025270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004307  00000000  00000000  0003a8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00070ae7  00000000  00000000  0003ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af6cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001578  00000000  00000000  000af720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001658 	.word	0x08001658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001658 	.word	0x08001658

080001c8 <init>:

#include "app.h"
#include "main.h"


void init() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d4:	4770      	bx	lr

080001d6 <loop>:

void loop() {
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0

}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <__NVIC_SetPriorityGrouping+0x44>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000200:	4013      	ands	r3, r2
 8000202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800020c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000216:	4a04      	ldr	r2, [pc, #16]	; (8000228 <__NVIC_SetPriorityGrouping+0x44>)
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	60d3      	str	r3, [r2, #12]
}
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000

0800024c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <LL_RCC_HSE_Enable+0x1c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a04      	ldr	r2, [pc, #16]	; (8000268 <LL_RCC_HSE_Enable+0x1c>)
 8000256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <LL_RCC_HSE_IsReady+0x24>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800027c:	bf0c      	ite	eq
 800027e:	2301      	moveq	r3, #1
 8000280:	2300      	movne	r3, #0
 8000282:	b2db      	uxtb	r3, r3
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000

08000294 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <LL_RCC_SetSysClkSource+0x24>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	f023 0203 	bic.w	r2, r3, #3
 80002a4:	4904      	ldr	r1, [pc, #16]	; (80002b8 <LL_RCC_SetSysClkSource+0x24>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4313      	orrs	r3, r2
 80002aa:	604b      	str	r3, [r1, #4]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <LL_RCC_GetSysClkSource+0x18>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	f003 030c 	and.w	r3, r3, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000

080002d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_RCC_SetAHBPrescaler+0x24>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <LL_RCC_SetAHBPrescaler+0x24>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	604b      	str	r3, [r1, #4]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <LL_RCC_SetAPB1Prescaler+0x24>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000310:	4904      	ldr	r1, [pc, #16]	; (8000324 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4313      	orrs	r3, r2
 8000316:	604b      	str	r3, [r1, #4]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000

08000328 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000338:	4904      	ldr	r1, [pc, #16]	; (800034c <LL_RCC_SetAPB2Prescaler+0x24>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4313      	orrs	r3, r2
 800033e:	604b      	str	r3, [r1, #4]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <LL_RCC_PLL_Enable+0x1c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <LL_RCC_PLL_Enable+0x1c>)
 800035a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <LL_RCC_PLL_IsReady+0x24>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
}
 8000388:	4618      	mov	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	430b      	orrs	r3, r1
 80003b4:	4909      	ldr	r1, [pc, #36]	; (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80003b6:	4313      	orrs	r3, r2
 80003b8:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80003bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003be:	f023 020f 	bic.w	r2, r3, #15
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f003 030f 	and.w	r3, r3, #15
 80003c8:	4904      	ldr	r1, [pc, #16]	; (80003dc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80003ca:	4313      	orrs	r3, r2
 80003cc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ea:	695a      	ldr	r2, [r3, #20]
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003f6:	695a      	ldr	r2, [r3, #20]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <LL_APB1_GRP1_EnableClock+0x2c>)
 800041a:	69da      	ldr	r2, [r3, #28]
 800041c:	4907      	ldr	r1, [pc, #28]	; (800043c <LL_APB1_GRP1_EnableClock+0x2c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000426:	69da      	ldr	r2, [r3, #28]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4013      	ands	r3, r2
 800042c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042e:	68fb      	ldr	r3, [r7, #12]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 800044a:	699a      	ldr	r2, [r3, #24]
 800044c:	4907      	ldr	r1, [pc, #28]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4013      	ands	r3, r2
 800045c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	bf00      	nop
 8000462:	3714      	adds	r7, #20
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <LL_SYSCFG_SetEXTISource+0x58>)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	3302      	adds	r3, #2
 8000482:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	0c1b      	lsrs	r3, r3, #16
 800048a:	43db      	mvns	r3, r3
 800048c:	ea02 0103 	and.w	r1, r2, r3
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	0c1b      	lsrs	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	fa93 f3a3 	rbit	r3, r3
 800049c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	fab3 f383 	clz	r3, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	fa03 f202 	lsl.w	r2, r3, r2
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <LL_SYSCFG_SetEXTISource+0x58>)
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	430a      	orrs	r2, r1
 80004b6:	3302      	adds	r3, #2
 80004b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40010000 	.word	0x40010000

080004cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_FLASH_SetLatency+0x24>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f023 0207 	bic.w	r2, r3, #7
 80004dc:	4904      	ldr	r1, [pc, #16]	; (80004f0 <LL_FLASH_SetLatency+0x24>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	600b      	str	r3, [r1, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40022000 	.word	0x40022000

080004f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <LL_FLASH_GetLatency+0x18>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f003 0307 	and.w	r3, r3, #7
}
 8000500:	4618      	mov	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40022000 	.word	0x40022000

08000510 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f043 0201 	orr.w	r2, r3, #1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800055c:	b480      	push	{r7}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3308      	adds	r3, #8
 8000568:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	e853 3f00 	ldrex	r3, [r3]
 8000570:	60bb      	str	r3, [r7, #8]
   return(result);
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000578:	61fb      	str	r3, [r7, #28]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3308      	adds	r3, #8
 800057e:	69fa      	ldr	r2, [r7, #28]
 8000580:	61ba      	str	r2, [r7, #24]
 8000582:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000584:	6979      	ldr	r1, [r7, #20]
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	e841 2300 	strex	r3, r2, [r1]
 800058c:	613b      	str	r3, [r7, #16]
   return(result);
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1e7      	bne.n	8000564 <LL_USART_DisableIT_CTS+0x8>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b089      	sub	sp, #36	; 0x24
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	fa93 f3a3 	rbit	r3, r3
 80005bc:	613b      	str	r3, [r7, #16]
  return result;
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	fab3 f383 	clz	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	2103      	movs	r1, #3
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	401a      	ands	r2, r3
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	fa93 f3a3 	rbit	r3, r3
 80005dc:	61bb      	str	r3, [r7, #24]
  return result;
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	fab3 f383 	clz	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	431a      	orrs	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3724      	adds	r7, #36	; 0x24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000600:	b480      	push	{r7}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa93 f3a3 	rbit	r3, r3
 800061a:	613b      	str	r3, [r7, #16]
  return result;
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	fab3 f383 	clz	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2103      	movs	r1, #3
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	401a      	ands	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	fa93 f3a3 	rbit	r3, r3
 800063a:	61bb      	str	r3, [r7, #24]
  return result;
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	fab3 f383 	clz	r3, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	431a      	orrs	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	60da      	str	r2, [r3, #12]
}
 8000652:	bf00      	nop
 8000654:	3724      	adds	r7, #36	; 0x24
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fede 	bl	8000440 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000684:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000688:	f7ff fec2 	bl	8000410 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800068c:	2007      	movs	r0, #7
 800068e:	f7ff fda9 	bl	80001e4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f809 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f89b 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f845 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init();
 800069e:	f7ff fd93 	bl	80001c8 <init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80006a2:	f7ff fd98 	bl	80001d6 <loop>
 80006a6:	e7fc      	b.n	80006a2 <main+0x28>

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f7ff ff0d 	bl	80004cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80006b2:	bf00      	nop
 80006b4:	f7ff ff1e 	bl	80004f4 <LL_FLASH_GetLatency>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d1fa      	bne.n	80006b4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_EnableBypass();
 80006be:	f7ff fdb5 	bl	800022c <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80006c2:	f7ff fdc3 	bl	800024c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80006c6:	bf00      	nop
 80006c8:	f7ff fdd0 	bl	800026c <LL_RCC_HSE_IsReady>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d1fa      	bne.n	80006c8 <SystemClock_Config+0x20>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_8);
 80006d2:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 80006d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006da:	f7ff fe5d 	bl	8000398 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80006de:	f7ff fe37 	bl	8000350 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006e2:	bf00      	nop
 80006e4:	f7ff fe44 	bl	8000370 <LL_RCC_PLL_IsReady>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d1fa      	bne.n	80006e4 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdf2 	bl	80002d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80006f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006f8:	f7ff fe02 	bl	8000300 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fe13 	bl	8000328 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff fdc6 	bl	8000294 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000708:	bf00      	nop
 800070a:	f7ff fdd7 	bl	80002bc <LL_RCC_GetSysClkSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b08      	cmp	r3, #8
 8000712:	d1fa      	bne.n	800070a <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <SystemClock_Config+0x7c>)
 8000716:	f000 ff5d 	bl	80015d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 800071a:	4802      	ldr	r0, [pc, #8]	; (8000724 <SystemClock_Config+0x7c>)
 800071c:	f000 ff68 	bl	80015f0 <LL_SetSystemCoreClock>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	03d09000 	.word	0x03d09000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08e      	sub	sp, #56	; 0x38
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000752:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000756:	f7ff fe5b 	bl	8000410 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800075a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800075e:	f7ff fe3f 	bl	80003e0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000762:	230c      	movs	r3, #12
 8000764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000776:	2307      	movs	r3, #7
 8000778:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000782:	f000 fc19 	bl	8000fb8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000786:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800078a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000798:	230c      	movs	r3, #12
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0xa4>)
 80007ac:	f000 fe8c 	bl	80014c8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0xa4>)
 80007b2:	f7ff fed3 	bl	800055c <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0xa4>)
 80007b8:	f7ff feba 	bl	8000530 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_USART2_UART_Init+0xa4>)
 80007be:	f7ff fea7 	bl	8000510 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80007f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007f6:	f7ff fdf3 	bl	80003e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80007fa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80007fe:	f7ff fdef 	bl	80003e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000802:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000806:	f7ff fdeb 	bl	80003e0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800080a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800080e:	f7ff fde7 	bl	80003e0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	481d      	ldr	r0, [pc, #116]	; (800088c <MX_GPIO_Init+0xbc>)
 8000818:	f7ff ff21 	bl	800065e <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800081c:	491c      	ldr	r1, [pc, #112]	; (8000890 <MX_GPIO_Init+0xc0>)
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff fe26 	bl	8000470 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	481a      	ldr	r0, [pc, #104]	; (8000894 <MX_GPIO_Init+0xc4>)
 800082c:	f7ff fee8 	bl	8000600 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4817      	ldr	r0, [pc, #92]	; (8000894 <MX_GPIO_Init+0xc4>)
 8000838:	f7ff feb3 	bl	80005a2 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000846:	2301      	movs	r3, #1
 8000848:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000852:	2302      	movs	r3, #2
 8000854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f9b3 	bl	8000bc8 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000868:	2301      	movs	r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_GPIO_Init+0xbc>)
 800087e:	f000 fb9b 	bl	8000fb8 <LL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	48000400 	.word	0x48000400
 8000890:	00f00003 	.word	0x00f00003
 8000894:	48000800 	.word	0x48000800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0b      	ldr	r4, [pc, #44]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093e:	f7ff ffd7 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f000 fe65 	bl	8001610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fe98 	bl	800067a <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000958:	08001690 	.word	0x08001690
  ldr r2, =_sbss
 800095c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000960:	20000020 	.word	0x20000020

08000964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_IRQHandler>
	...

08000968 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <LL_EXTI_EnableIT_0_31+0x20>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4904      	ldr	r1, [pc, #16]	; (8000988 <LL_EXTI_EnableIT_0_31+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40010400 	.word	0x40010400

0800098c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <LL_EXTI_EnableIT_32_63+0x20>)
 8000996:	6a1a      	ldr	r2, [r3, #32]
 8000998:	4904      	ldr	r1, [pc, #16]	; (80009ac <LL_EXTI_EnableIT_32_63+0x20>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4313      	orrs	r3, r2
 800099e:	620b      	str	r3, [r1, #32]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40010400 	.word	0x40010400

080009b0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	43db      	mvns	r3, r3
 80009c0:	4904      	ldr	r1, [pc, #16]	; (80009d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80009c2:	4013      	ands	r3, r2
 80009c4:	600b      	str	r3, [r1, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40010400 	.word	0x40010400

080009d8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LL_EXTI_DisableIT_32_63+0x24>)
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <LL_EXTI_DisableIT_32_63+0x24>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	620b      	str	r3, [r1, #32]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40010400 	.word	0x40010400

08000a00 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	4904      	ldr	r1, [pc, #16]	; (8000a20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]

}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40010400 	.word	0x40010400

08000a24 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a30:	4904      	ldr	r1, [pc, #16]	; (8000a44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40010400 	.word	0x40010400

08000a48 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4904      	ldr	r1, [pc, #16]	; (8000a6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	604b      	str	r3, [r1, #4]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40010400 	.word	0x40010400

08000a70 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40010400 	.word	0x40010400

08000a98 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	4904      	ldr	r1, [pc, #16]	; (8000ab8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	608b      	str	r3, [r1, #8]

}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40010400 	.word	0x40010400

08000abc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ac8:	4904      	ldr	r1, [pc, #16]	; (8000adc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40010400 	.word	0x40010400

08000ae0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	4904      	ldr	r1, [pc, #16]	; (8000b04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	608b      	str	r3, [r1, #8]

}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40010400 	.word	0x40010400

08000b08 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40010400 	.word	0x40010400

08000b30 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	4904      	ldr	r1, [pc, #16]	; (8000b50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60cb      	str	r3, [r1, #12]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40010400 	.word	0x40010400

08000b54 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4904      	ldr	r1, [pc, #16]	; (8000b74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40010400 	.word	0x40010400

08000b78 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	4904      	ldr	r1, [pc, #16]	; (8000b9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60cb      	str	r3, [r1, #12]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7a1b      	ldrb	r3, [r3, #8]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f000 80cd 	beq.w	8000d78 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d061      	beq.n	8000caa <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7a5b      	ldrb	r3, [r3, #9]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d01c      	beq.n	8000c28 <LL_EXTI_Init+0x60>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	dc25      	bgt.n	8000c3e <LL_EXTI_Init+0x76>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <LL_EXTI_Init+0x34>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d00b      	beq.n	8000c12 <LL_EXTI_Init+0x4a>
 8000bfa:	e020      	b.n	8000c3e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff21 	bl	8000a48 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff feac 	bl	8000968 <LL_EXTI_EnableIT_0_31>
          break;
 8000c10:	e018      	b.n	8000c44 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff feca 	bl	80009b0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff feed 	bl	8000a00 <LL_EXTI_EnableEvent_0_31>
          break;
 8000c26:	e00d      	b.n	8000c44 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9b 	bl	8000968 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fee2 	bl	8000a00 <LL_EXTI_EnableEvent_0_31>
          break;
 8000c3c:	e002      	b.n	8000c44 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
          break;
 8000c42:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7a9b      	ldrb	r3, [r3, #10]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d02e      	beq.n	8000caa <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7a9b      	ldrb	r3, [r3, #10]
 8000c50:	2b03      	cmp	r3, #3
 8000c52:	d01c      	beq.n	8000c8e <LL_EXTI_Init+0xc6>
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	dc25      	bgt.n	8000ca4 <LL_EXTI_Init+0xdc>
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d002      	beq.n	8000c62 <LL_EXTI_Init+0x9a>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d00b      	beq.n	8000c78 <LL_EXTI_Init+0xb0>
 8000c60:	e020      	b.n	8000ca4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff86 	bl	8000b78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff11 	bl	8000a98 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000c76:	e019      	b.n	8000cac <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff2f 	bl	8000ae0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff52 	bl	8000b30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000c8c:	e00e      	b.n	8000cac <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff00 	bl	8000a98 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff47 	bl	8000b30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000ca2:	e003      	b.n	8000cac <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
            break;
 8000ca8:	e000      	b.n	8000cac <LL_EXTI_Init+0xe4>
        }
      }
 8000caa:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d076      	beq.n	8000da2 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a5b      	ldrb	r3, [r3, #9]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d01c      	beq.n	8000cf6 <LL_EXTI_Init+0x12e>
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	dc25      	bgt.n	8000d0c <LL_EXTI_Init+0x144>
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <LL_EXTI_Init+0x102>
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d00b      	beq.n	8000ce0 <LL_EXTI_Init+0x118>
 8000cc8:	e020      	b.n	8000d0c <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fece 	bl	8000a70 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe57 	bl	800098c <LL_EXTI_EnableIT_32_63>
          break;
 8000cde:	e018      	b.n	8000d12 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe77 	bl	80009d8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe98 	bl	8000a24 <LL_EXTI_EnableEvent_32_63>
          break;
 8000cf4:	e00d      	b.n	8000d12 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe46 	bl	800098c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe8d 	bl	8000a24 <LL_EXTI_EnableEvent_32_63>
          break;
 8000d0a:	e002      	b.n	8000d12 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8000d10:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7a9b      	ldrb	r3, [r3, #10]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d043      	beq.n	8000da2 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7a9b      	ldrb	r3, [r3, #10]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d01c      	beq.n	8000d5c <LL_EXTI_Init+0x194>
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	dc25      	bgt.n	8000d72 <LL_EXTI_Init+0x1aa>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d002      	beq.n	8000d30 <LL_EXTI_Init+0x168>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d00b      	beq.n	8000d46 <LL_EXTI_Init+0x17e>
 8000d2e:	e020      	b.n	8000d72 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff febc 	bl	8000abc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000d44:	e02e      	b.n	8000da4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fedc 	bl	8000b08 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fefd 	bl	8000b54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000d5a:	e023      	b.n	8000da4 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff feab 	bl	8000abc <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fef2 	bl	8000b54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000d70:	e018      	b.n	8000da4 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
            break;
 8000d76:	e015      	b.n	8000da4 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe17 	bl	80009b0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe5e 	bl	8000a48 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe21 	bl	80009d8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fe68 	bl	8000a70 <LL_EXTI_DisableEvent_32_63>
 8000da0:	e000      	b.n	8000da4 <LL_EXTI_Init+0x1dc>
      }
 8000da2:	bf00      	nop
#endif
  }
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <LL_GPIO_SetPinMode>:
{
 8000dae:	b480      	push	{r7}
 8000db0:	b089      	sub	sp, #36	; 0x24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	613b      	str	r3, [r7, #16]
  return result;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa93 f3a3 	rbit	r3, r3
 8000de8:	61bb      	str	r3, [r7, #24]
  return result;
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	fab3 f383 	clz	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	3724      	adds	r7, #36	; 0x24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_GPIO_SetPinOutputType>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	401a      	ands	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	605a      	str	r2, [r3, #4]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_GPIO_SetPinSpeed>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	613b      	str	r3, [r7, #16]
  return result;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2103      	movs	r1, #3
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	fa93 f3a3 	rbit	r3, r3
 8000e76:	61bb      	str	r3, [r7, #24]
  return result;
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	609a      	str	r2, [r3, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <LL_GPIO_SetPinPull>:
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b089      	sub	sp, #36	; 0x24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	613b      	str	r3, [r7, #16]
  return result;
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fab3 f383 	clz	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa93 f3a3 	rbit	r3, r3
 8000ed4:	61bb      	str	r3, [r7, #24]
  return result;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	60da      	str	r2, [r3, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3724      	adds	r7, #36	; 0x24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_GPIO_SetAFPin_0_7>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a1a      	ldr	r2, [r3, #32]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	613b      	str	r3, [r7, #16]
  return result;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	fab3 f383 	clz	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	210f      	movs	r1, #15
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	61bb      	str	r3, [r7, #24]
  return result;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	431a      	orrs	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	621a      	str	r2, [r3, #32]
}
 8000f4a:	bf00      	nop
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_GPIO_SetAFPin_8_15>:
{
 8000f56:	b480      	push	{r7}
 8000f58:	b089      	sub	sp, #36	; 0x24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	613b      	str	r3, [r7, #16]
  return result;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	210f      	movs	r1, #15
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	61bb      	str	r3, [r7, #24]
  return result;
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	fab3 f383 	clz	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fac:	bf00      	nop
 8000fae:	3724      	adds	r7, #36	; 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	613b      	str	r3, [r7, #16]
  return result;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	fab3 f383 	clz	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000fda:	e051      	b.n	8001080 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d043      	beq.n	800107a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d003      	beq.n	8001002 <LL_GPIO_Init+0x4a>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d10e      	bne.n	8001020 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	69b9      	ldr	r1, [r7, #24]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff16 	bl	8000e3c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	461a      	mov	r2, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fef6 	bl	8000e0c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	461a      	mov	r2, r3
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff36 	bl	8000e9a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d11a      	bne.n	800106c <LL_GPIO_Init+0xb4>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	60bb      	str	r3, [r7, #8]
  return result;
 8001042:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b07      	cmp	r3, #7
 800104c:	d807      	bhi.n	800105e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	461a      	mov	r2, r3
 8001054:	69b9      	ldr	r1, [r7, #24]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff4e 	bl	8000ef8 <LL_GPIO_SetAFPin_0_7>
 800105c:	e006      	b.n	800106c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	461a      	mov	r2, r3
 8001064:	69b9      	ldr	r1, [r7, #24]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff75 	bl	8000f56 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	461a      	mov	r2, r3
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fe9a 	bl	8000dae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1a6      	bne.n	8000fdc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <LL_RCC_HSI_IsReady>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <LL_RCC_HSI_IsReady+0x20>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	bf0c      	ite	eq
 80010a8:	2301      	moveq	r3, #1
 80010aa:	2300      	movne	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000

080010bc <LL_RCC_LSE_IsReady>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <LL_RCC_LSE_IsReady+0x20>)
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000

080010e0 <LL_RCC_GetSysClkSource>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <LL_RCC_GetSysClkSource+0x18>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <LL_RCC_GetAHBPrescaler>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <LL_RCC_GetAHBPrescaler+0x18>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <LL_RCC_GetAPB1Prescaler>:
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <LL_RCC_GetAPB1Prescaler+0x18>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <LL_RCC_GetAPB2Prescaler>:
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <LL_RCC_GetAPB2Prescaler+0x18>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <LL_RCC_GetUSARTClockSource>:
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <LL_RCC_GetUSARTClockSource+0x28>)
 800115a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800115c:	2103      	movs	r1, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	401a      	ands	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	061b      	lsls	r3, r3, #24
 800116a:	4313      	orrs	r3, r2
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <LL_RCC_PLL_GetMainSource+0x18>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <LL_RCC_PLL_GetPrediv+0x18>)
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	f003 030f 	and.w	r3, r3, #15
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80011d8:	f000 f864 	bl	80012a4 <RCC_GetSystemClockFreq>
 80011dc:	4602      	mov	r2, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f882 	bl	80012f0 <RCC_GetHCLKClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f890 	bl	800131c <RCC_GetPCLK1ClockFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f89c 	bl	8001344 <RCC_GetPCLK2ClockFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60da      	str	r2, [r3, #12]
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d12d      	bne.n	800128a <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff8e 	bl	8001150 <LL_RCC_GetUSARTClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b03      	cmp	r3, #3
 8001238:	d00a      	beq.n	8001250 <LL_RCC_GetUSARTClockFreq+0x34>
 800123a:	2b03      	cmp	r3, #3
 800123c:	d819      	bhi.n	8001272 <LL_RCC_GetUSARTClockFreq+0x56>
 800123e:	2b01      	cmp	r3, #1
 8001240:	d002      	beq.n	8001248 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001242:	2b02      	cmp	r3, #2
 8001244:	d00c      	beq.n	8001260 <LL_RCC_GetUSARTClockFreq+0x44>
 8001246:	e014      	b.n	8001272 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001248:	f000 f82c 	bl	80012a4 <RCC_GetSystemClockFreq>
 800124c:	60f8      	str	r0, [r7, #12]
        break;
 800124e:	e021      	b.n	8001294 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001250:	f7ff ff22 	bl	8001098 <LL_RCC_HSI_IsReady>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <LL_RCC_GetUSARTClockFreq+0x84>)
 800125c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800125e:	e016      	b.n	800128e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001260:	f7ff ff2c 	bl	80010bc <LL_RCC_LSE_IsReady>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d013      	beq.n	8001292 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001270:	e00f      	b.n	8001292 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001272:	f000 f817 	bl	80012a4 <RCC_GetSystemClockFreq>
 8001276:	4603      	mov	r3, r0
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f839 	bl	80012f0 <RCC_GetHCLKClockFreq>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f84b 	bl	800131c <RCC_GetPCLK1ClockFreq>
 8001286:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001288:	e004      	b.n	8001294 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 800128a:	bf00      	nop
 800128c:	e002      	b.n	8001294 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800128e:	bf00      	nop
 8001290:	e000      	b.n	8001294 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001292:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	007a1200 	.word	0x007a1200

080012a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80012ae:	f7ff ff17 	bl	80010e0 <LL_RCC_GetSysClkSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d00c      	beq.n	80012d2 <RCC_GetSystemClockFreq+0x2e>
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d80e      	bhi.n	80012da <RCC_GetSystemClockFreq+0x36>
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <RCC_GetSystemClockFreq+0x22>
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d003      	beq.n	80012cc <RCC_GetSystemClockFreq+0x28>
 80012c4:	e009      	b.n	80012da <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <RCC_GetSystemClockFreq+0x48>)
 80012c8:	607b      	str	r3, [r7, #4]
      break;
 80012ca:	e009      	b.n	80012e0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <RCC_GetSystemClockFreq+0x48>)
 80012ce:	607b      	str	r3, [r7, #4]
      break;
 80012d0:	e006      	b.n	80012e0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80012d2:	f000 f84b 	bl	800136c <RCC_PLL_GetFreqDomain_SYS>
 80012d6:	6078      	str	r0, [r7, #4]
      break;
 80012d8:	e002      	b.n	80012e0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <RCC_GetSystemClockFreq+0x48>)
 80012dc:	607b      	str	r3, [r7, #4]
      break;
 80012de:	bf00      	nop
  }

  return frequency;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	007a1200 	.word	0x007a1200

080012f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012f8:	f7ff ff00 	bl	80010fc <LL_RCC_GetAHBPrescaler>
 80012fc:	4603      	mov	r3, r0
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	4a04      	ldr	r2, [pc, #16]	; (8001318 <RCC_GetHCLKClockFreq+0x28>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	40d3      	lsrs	r3, r2
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08001670 	.word	0x08001670

0800131c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001324:	f7ff fef8 	bl	8001118 <LL_RCC_GetAPB1Prescaler>
 8001328:	4603      	mov	r3, r0
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <RCC_GetPCLK1ClockFreq+0x24>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	40d3      	lsrs	r3, r2
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08001680 	.word	0x08001680

08001344 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800134c:	f7ff fef2 	bl	8001134 <LL_RCC_GetAPB2Prescaler>
 8001350:	4603      	mov	r3, r0
 8001352:	0adb      	lsrs	r3, r3, #11
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <RCC_GetPCLK2ClockFreq+0x24>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	461a      	mov	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	40d3      	lsrs	r3, r2
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	08001680 	.word	0x08001680

0800136c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800137a:	f7ff feff 	bl	800117c <LL_RCC_PLL_GetMainSource>
 800137e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138c:	d003      	beq.n	8001396 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800138e:	e005      	b.n	800139c <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001392:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001394:	e005      	b.n	80013a2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001398:	60fb      	str	r3, [r7, #12]
      break;
 800139a:	e002      	b.n	80013a2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800139e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80013a0:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80013a2:	f7ff ff07 	bl	80011b4 <LL_RCC_PLL_GetPrediv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	3301      	adds	r3, #1
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	fbb2 f4f3 	udiv	r4, r2, r3
 80013b0:	f7ff fef2 	bl	8001198 <LL_RCC_PLL_GetMultiplicator>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013ba:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013be:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	fa92 f2a2 	rbit	r2, r2
 80013c6:	603a      	str	r2, [r7, #0]
  return result;
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	fab2 f282 	clz	r2, r2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	3302      	adds	r3, #2
 80013d4:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	003d0900 	.word	0x003d0900
 80013e4:	007a1200 	.word	0x007a1200

080013e8 <LL_USART_IsEnabled>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <LL_USART_IsEnabled+0x18>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <LL_USART_IsEnabled+0x1a>
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_USART_SetStopBitsLength>:
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_USART_SetHWFlowCtrl>:
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_USART_SetBaudRate>:
{
 800145a:	b480      	push	{r7}
 800145c:	b087      	sub	sp, #28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800146e:	d11a      	bne.n	80014a6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	005a      	lsls	r2, r3, #1
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	441a      	add	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	e00a      	b.n	80014bc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	085a      	lsrs	r2, r3, #1
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	441a      	add	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	60da      	str	r2, [r3, #12]
}
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff84 	bl	80013e8 <LL_USART_IsEnabled>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d14e      	bne.n	8001584 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <LL_USART_Init+0xc8>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6851      	ldr	r1, [r2, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	68d2      	ldr	r2, [r2, #12]
 80014f6:	4311      	orrs	r1, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6912      	ldr	r2, [r2, #16]
 80014fc:	4311      	orrs	r1, r2
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	6992      	ldr	r2, [r2, #24]
 8001502:	430a      	orrs	r2, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4619      	mov	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff7c 	bl	800140e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff89 	bl	8001434 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <LL_USART_Init+0xcc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d104      	bne.n	8001534 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fe76 	bl	800121c <LL_RCC_GetUSARTClockFreq>
 8001530:	61b8      	str	r0, [r7, #24]
 8001532:	e016      	b.n	8001562 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <LL_USART_Init+0xd0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d107      	bne.n	800154c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe45 	bl	80011d0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	e00a      	b.n	8001562 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <LL_USART_Init+0xd4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe39 	bl	80011d0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00d      	beq.n	8001584 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001570:	2300      	movs	r3, #0
 8001572:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	699a      	ldr	r2, [r3, #24]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69b9      	ldr	r1, [r7, #24]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff6b 	bl	800145a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001584:	7ffb      	ldrb	r3, [r7, #31]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	efff69f3 	.word	0xefff69f3
 8001594:	40013800 	.word	0x40013800
 8001598:	40004400 	.word	0x40004400
 800159c:	40004800 	.word	0x40004800

080015a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <LL_InitTick+0x30>)
 80015b4:	3b01      	subs	r3, #1
 80015b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_InitTick+0x30>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <LL_InitTick+0x30>)
 80015c0:	2205      	movs	r2, #5
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80015dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ffdd 	bl	80015a0 <LL_InitTick>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <LL_SetSystemCoreClock+0x1c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000000 	.word	0x20000000

08001610 <__libc_init_array>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	4d0d      	ldr	r5, [pc, #52]	; (8001648 <__libc_init_array+0x38>)
 8001614:	4c0d      	ldr	r4, [pc, #52]	; (800164c <__libc_init_array+0x3c>)
 8001616:	1b64      	subs	r4, r4, r5
 8001618:	10a4      	asrs	r4, r4, #2
 800161a:	2600      	movs	r6, #0
 800161c:	42a6      	cmp	r6, r4
 800161e:	d109      	bne.n	8001634 <__libc_init_array+0x24>
 8001620:	4d0b      	ldr	r5, [pc, #44]	; (8001650 <__libc_init_array+0x40>)
 8001622:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__libc_init_array+0x44>)
 8001624:	f000 f818 	bl	8001658 <_init>
 8001628:	1b64      	subs	r4, r4, r5
 800162a:	10a4      	asrs	r4, r4, #2
 800162c:	2600      	movs	r6, #0
 800162e:	42a6      	cmp	r6, r4
 8001630:	d105      	bne.n	800163e <__libc_init_array+0x2e>
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	f855 3b04 	ldr.w	r3, [r5], #4
 8001638:	4798      	blx	r3
 800163a:	3601      	adds	r6, #1
 800163c:	e7ee      	b.n	800161c <__libc_init_array+0xc>
 800163e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001642:	4798      	blx	r3
 8001644:	3601      	adds	r6, #1
 8001646:	e7f2      	b.n	800162e <__libc_init_array+0x1e>
 8001648:	08001688 	.word	0x08001688
 800164c:	08001688 	.word	0x08001688
 8001650:	08001688 	.word	0x08001688
 8001654:	0800168c 	.word	0x0800168c

08001658 <_init>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr

08001664 <_fini>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr
